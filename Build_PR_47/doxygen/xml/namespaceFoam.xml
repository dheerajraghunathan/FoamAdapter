<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceFoam" kind="namespace" language="C++">
    <compoundname>Foam</compoundname>
    <innerclass refid="classFoam_1_1CreateFromFoamField" prot="public">Foam::CreateFromFoamField</innerclass>
    <innerclass refid="classFoam_1_1MeshAdapter" prot="public">Foam::MeshAdapter</innerclass>
    <innerclass refid="structFoam_1_1type__map" prot="public">Foam::type_map</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01Field_3_01scalar_01_4_01_4" prot="public">Foam::type_map&lt; Field&lt; scalar &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01Field_3_01vector_01_4_01_4" prot="public">Foam::type_map&lt; Field&lt; vector &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01GeometricField_3_01scalar_00_01fvPatchField_00_01volMesh_01_4_01_4" prot="public">Foam::type_map&lt; GeometricField&lt; scalar, fvPatchField, volMesh &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01GeometricField_3_01scalar_00_01fvsPatchField_00_01surfaceMesh_01_4_01_4" prot="public">Foam::type_map&lt; GeometricField&lt; scalar, fvsPatchField, surfaceMesh &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01GeometricField_3_01vector_00_01fvPatchField_00_01volMesh_01_4_01_4" prot="public">Foam::type_map&lt; GeometricField&lt; vector, fvPatchField, volMesh &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01GeometricField_3_01vector_00_01fvsPatchField_00_01surfaceMesh_01_4_01_4" prot="public">Foam::type_map&lt; GeometricField&lt; vector, fvsPatchField, surfaceMesh &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01List_3_01label_01_4_01_4" prot="public">Foam::type_map&lt; List&lt; label &gt; &gt;</innerclass>
    <innerclass refid="structFoam_1_1type__map_3_01List_3_01scalar_01_4_01_4" prot="public">Foam::type_map&lt; List&lt; scalar &gt; &gt;</innerclass>
    <innernamespace refid="namespaceFoam_1_1detail">Foam::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceFoam_1ab3beb0ba5d4374c9ab554f9d5a94e4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::Vector</type>
        <definition>NeoFOAM::Vector Foam::convert</definition>
        <argsstring>(const Foam::vector &amp;Type)</argsstring>
        <name>convert</name>
        <qualifiedname>Foam::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::vector</ref> &amp;</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" line="13" column="17" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" declline="13" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a688e7413116ef4bb79fac33d36438018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::scalar</type>
        <definition>NeoFOAM::scalar Foam::convert</definition>
        <argsstring>(const Foam::scalar &amp;Type)</argsstring>
        <name>convert</name>
        <qualifiedname>Foam::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::scalar</ref> &amp;</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" line="14" column="17" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" declline="14" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a6ae98d335e7d186edec0da8bf7822d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Foam::convert</definition>
        <argsstring>(const Foam::word &amp;Type)</argsstring>
        <name>convert</name>
        <qualifiedname>Foam::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::word</ref> &amp;</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" line="15" column="13" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" declline="15" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a8d7c192703777089614e011eeba30936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::TokenList</type>
        <definition>NeoFOAM::TokenList Foam::convert</definition>
        <argsstring>(const Foam::ITstream &amp;Type)</argsstring>
        <name>convert</name>
        <qualifiedname>Foam::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::ITstream</ref> &amp;</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" line="17" column="20" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" declline="17" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1aea4ad1691c4cd4afa065a8f224daa415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::label</type>
        <definition>NeoFOAM::label Foam::convert</definition>
        <argsstring>(const Foam::label &amp;Type)</argsstring>
        <name>convert</name>
        <qualifiedname>Foam::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::label</ref> &amp;</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" line="19" column="16" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" declline="19" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1aa53202d0eed5e779905ff725630ef30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::vector</ref></type>
        <definition>Foam::vector Foam::convert</definition>
        <argsstring>(const NeoFOAM::Vector &amp;Type)</argsstring>
        <name>convert</name>
        <qualifiedname>Foam::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::Vector &amp;</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" line="22" column="14" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/conversion/convert.hpp" declline="22" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1aa8099011c9e98453f6c1997c91dd6418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; NeoFOAM::localIdx &gt;</type>
        <definition>std::vector&lt; NeoFOAM::localIdx &gt; Foam::computeOffset</definition>
        <argsstring>(const fvMesh &amp;mesh)</argsstring>
        <name>computeOffset</name>
        <qualifiedname>Foam::computeOffset</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> fvMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" line="18" column="13" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1aa1f7377ad5c74f9886a6d95908462bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">int32_t</ref></type>
        <definition>int32_t Foam::computeNBoundaryFaces</definition>
        <argsstring>(const fvMesh &amp;mesh)</argsstring>
        <name>computeNBoundaryFaces</name>
        <qualifiedname>Foam::computeNBoundaryFaces</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> fvMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" line="20" column="9" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" declline="20" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1ab181f2248e18e426c403628f8df13090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FieldT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FieldT</ref></type>
        <definition>FieldT Foam::flatBCField</definition>
        <argsstring>(const fvMesh &amp;mesh, std::function&lt; FieldT(const fvPatch &amp;)&gt; f)</argsstring>
        <name>flatBCField</name>
        <qualifiedname>Foam::flatBCField</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> fvMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FieldT</ref>(<ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">fvPatch</ref> &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" line="23" column="8" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" declline="23" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a56ff30f4d89a4ddde2ec5fa45d0acbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::UnstructuredMesh</type>
        <definition>NeoFOAM::UnstructuredMesh Foam::readOpenFOAMMesh</definition>
        <argsstring>(const NeoFOAM::Executor exec, const fvMesh &amp;mesh)</argsstring>
        <name>readOpenFOAMMesh</name>
        <qualifiedname>Foam::readOpenFOAMMesh</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::Executor</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> fvMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" line="25" column="27" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/meshAdapter.hpp" declline="25" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a510bcfc65e0b44a15c2a85865a18ef56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FoamType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">auto</ref></type>
        <definition>auto Foam::fromFoamField</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, const FoamType &amp;field)</argsstring>
        <name>fromFoamField</name>
        <qualifiedname>Foam::fromFoamField</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::Executor &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FoamType</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" line="20" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" bodystart="20" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1acb0f3c718238c18974750e6af37fffe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FoamType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">auto</ref></type>
        <definition>auto Foam::readVolBoundaryConditions</definition>
        <argsstring>(const NeoFOAM::UnstructuredMesh &amp;nfMesh, const FoamType &amp;ofVolField)</argsstring>
        <name>readVolBoundaryConditions</name>
        <qualifiedname>Foam::readVolBoundaryConditions</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::UnstructuredMesh &amp;</type>
          <declname>nfMesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FoamType</ref> &amp;</type>
          <declname>ofVolField</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" line="34" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" bodystart="34" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a13fdf652323aac7aa48ae097e2bb056f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FoamType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">auto</ref></type>
        <definition>auto Foam::constructFrom</definition>
        <argsstring>(const NeoFOAM::Executor exec, const NeoFOAM::UnstructuredMesh &amp;nfMesh, const FoamType &amp;in)</argsstring>
        <name>constructFrom</name>
        <qualifiedname>Foam::constructFrom</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::Executor</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::UnstructuredMesh &amp;</type>
          <declname>nfMesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FoamType</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" line="106" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" bodystart="106" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1acd265e60178510d67171caf141bb764d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FoamType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">auto</ref></type>
        <definition>auto Foam::readSurfaceBoundaryConditions</definition>
        <argsstring>(const NeoFOAM::UnstructuredMesh &amp;uMesh, const FoamType &amp;surfaceField)</argsstring>
        <name>readSurfaceBoundaryConditions</name>
        <qualifiedname>Foam::readSurfaceBoundaryConditions</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::UnstructuredMesh &amp;</type>
          <declname>uMesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FoamType</ref> &amp;</type>
          <declname>surfaceField</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" line="124" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" bodystart="124" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a264f967af43345b6b768ab6d3c237969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FoamType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">auto</ref></type>
        <definition>auto Foam::constructSurfaceField</definition>
        <argsstring>(const NeoFOAM::Executor exec, const NeoFOAM::UnstructuredMesh &amp;nfMesh, const FoamType &amp;in)</argsstring>
        <name>constructSurfaceField</name>
        <qualifiedname>Foam::constructSurfaceField</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::Executor</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::UnstructuredMesh &amp;</type>
          <declname>nfMesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">FoamType</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" line="171" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers.hpp" bodystart="171" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a72651f8ba175856f1ed302da4c898441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">bool</ref></type>
        <definition>bool Foam::convertEntry</definition>
        <argsstring>(NeoFOAM::Dictionary &amp;neoDict, const Foam::entry &amp;entry)</argsstring>
        <name>convertEntry</name>
        <qualifiedname>Foam::convertEntry</qualifiedname>
        <param>
          <type>NeoFOAM::Dictionary &amp;</type>
          <declname>neoDict</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::entry</ref> &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers/foamDictionary.hpp" line="14" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers/foamDictionary.hpp" bodystart="14" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Foam::checkEntryType</definition>
        <argsstring>(const Foam::entry &amp;entry)</argsstring>
        <name>checkEntryType</name>
        <qualifiedname>Foam::checkEntryType</qualifiedname>
        <param>
          <type>const Foam::entry &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers/foamDictionary.hpp" line="27" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers/foamDictionary.hpp" bodystart="27" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a19cd1e450383d7a47324776eff449905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::Dictionary</type>
        <definition>NeoFOAM::Dictionary Foam::readFoamDictionary</definition>
        <argsstring>(const Foam::dictionary &amp;dict)</argsstring>
        <name>readFoamDictionary</name>
        <qualifiedname>Foam::readFoamDictionary</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Foam::dictionary</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers/foamDictionary.hpp" line="52" column="21" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/readers/foamDictionary.hpp" declline="52" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1ab2ae77dfac22de0e7ebc7977cc1cf6a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">bool</ref>, <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">scalar</ref>, <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">scalar</ref> &gt;</type>
        <definition>std::tuple&lt; bool, scalar, scalar &gt; Foam::timeControls</definition>
        <argsstring>(const Time &amp;runTime)</argsstring>
        <name>timeControls</name>
        <qualifiedname>Foam::timeControls</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Time</ref> &amp;</type>
          <declname>runTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" line="16" column="12" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" declline="16" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a9e14a6a8187c23468e9f04161da23872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">scalar</ref></type>
        <definition>scalar Foam::calculateCoNum</definition>
        <argsstring>(const surfaceScalarField &amp;phi)</argsstring>
        <name>calculateCoNum</name>
        <qualifiedname>Foam::calculateCoNum</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">surfaceScalarField</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" line="18" column="8" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" declline="18" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a1f451056e368f6f6b507ae472e785faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">void</ref></type>
        <definition>void Foam::setDeltaT</definition>
        <argsstring>(Time &amp;runTime, scalar maxCo, scalar CoNum, scalar maxDeltaT)</argsstring>
        <name>setDeltaT</name>
        <qualifiedname>Foam::setDeltaT</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Time</ref> &amp;</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">scalar</ref></type>
          <declname>maxCo</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">scalar</ref></type>
          <declname>CoNum</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">scalar</ref></type>
          <declname>maxDeltaT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" line="20" column="6" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a4d1a6b63d0688b0fab1d703ef95cdb4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classFoam_1_1MeshAdapter" kindref="compound">MeshAdapter</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MeshAdapter &gt; Foam::createMesh</definition>
        <argsstring>(const NeoFOAM::Executor &amp;exec, const Time &amp;runTime)</argsstring>
        <name>createMesh</name>
        <qualifiedname>Foam::createMesh</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> NeoFOAM::Executor &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Time</ref> &amp;</type>
          <declname>runTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" line="22" column="17" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" declline="22" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1aea1c46297050941c3a6847826e9b47ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; fvMesh &gt;</type>
        <definition>std::unique_ptr&lt; fvMesh &gt; Foam::createMesh</definition>
        <argsstring>(const Time &amp;runTime)</argsstring>
        <name>createMesh</name>
        <qualifiedname>Foam::createMesh</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">Time</ref> &amp;</type>
          <declname>runTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" line="24" column="17" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" declline="24" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1abd04305efe6eff712344425ae7184a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NeoFOAM::Executor</type>
        <definition>NeoFOAM::Executor Foam::createExecutor</definition>
        <argsstring>(const dictionary &amp;dict)</argsstring>
        <name>createExecutor</name>
        <qualifiedname>Foam::createExecutor</qualifiedname>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> <ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">dictionary</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" line="26" column="19" declfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/setup.hpp" declline="26" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a483f0076a54ed729c2f6155d6d6db3f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">void</ref></type>
        <definition>void Foam::write</definition>
        <argsstring>(NeoFOAM::scalarField &amp;sf, const Foam::fvMesh &amp;mesh, const std::string fieldName)</argsstring>
        <name>write</name>
        <qualifiedname>Foam::write</qualifiedname>
        <param>
          <type>NeoFOAM::scalarField &amp;</type>
          <declname>sf</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> Foam::fvMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> std::string</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/writers.hpp" line="30" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/writers.hpp" bodystart="30" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceFoam_1a03108e1e5a7bc01702aa2ce7e71234f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">void</ref></type>
        <definition>void Foam::write</definition>
        <argsstring>(NeoFOAM::vectorField &amp;sf, const Foam::fvMesh &amp;mesh, const std::string fieldName)</argsstring>
        <name>write</name>
        <qualifiedname>Foam::write</qualifiedname>
        <param>
          <type>NeoFOAM::vectorField &amp;</type>
          <declname>sf</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> Foam::fvMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceFoam_1a6d2b642fe0c0e5fe72403ba83c8d9cb7" kindref="member">const</ref> std::string</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/writers.hpp" line="56" column="6" bodyfile="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/writers.hpp" bodystart="56" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/FoamAdapter/FoamAdapter/include/FoamAdapter/comparison.hpp" line="19" column="1"/>
  </compounddef>
</doxygen>
